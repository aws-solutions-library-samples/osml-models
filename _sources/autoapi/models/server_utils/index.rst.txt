models.server_utils
===================

.. py:module:: models.server_utils


Functions
---------

.. autoapisummary::

   models.server_utils.setup_server
   models.server_utils.configure_logging
   models.server_utils.detect_to_feature


Module Contents
---------------

.. py:function:: setup_server(app: flask.Flask)

   The assumption is that this script will be the ENTRYPOINT for the inference
   container. SageMaker will launch the container with the "serve" argument. We
   also have the option of using multiple models from this single container;
   only one model will be active at a time (i.e., this is not a Multi Model Server),
   so it can be selected by name using the "model" parameter.

   :param app: The flask application to set up
   :return: None


.. py:function:: configure_logging(verbose: bool = False) -> None

   Configure application logging. Note the timestamp for the
   log record is available in CloudWatch if this is used in a
   non-AWS environment, you can add %(asctime)s to the start of
   the format string.

   :param verbose: True, if the DEBUG log level should be used, defaults to False
   :return: None


.. py:function:: detect_to_feature(fixed_object_bbox: List[float], fixed_object_mask: Optional[List[List[float]]] = None, detection_score: Optional[float] = 1.0, detection_type: Optional[str] = 'sample_object') -> Dict[str, Union[str, list]]

   Converts the bbox object into a sample GeoJSON formatted detection.
   The model container does not normally provide the world coordinates,
   so they're defaulted to 0,0 here since GeoJSON features require a geometry.

   :param detection_type: Class assigned to the detection
   :param detection_score: Confidence score assigned to the detection
   :param fixed_object_mask: Polygon version of mask generated by detectron2
   :param fixed_object_bbox: Bounding box to transform into a geojson feature
   :return: dict: Dictionary representation of a geojson feature


