# Tox (http://tox.testrun.org/) is a tool for running tests in multiple virtualenvs.
# This configuration file will run the test suite on all supported Python versions.
# To use it, "pip install tox" and then run "tox" from this directory.

# {posargs} can be passed in by additional arguments specified when invoking tox.
# Can be used to specify which tests to run, e.g.: tox -- -s


[tox]
envlist = flake8,black,isort,twine,unit,docs
requires = tox-conda
skip_missing_interpreters = False
isolated_build = true

[testenv]
basepython = python3.10
setenv =
    MODEL_WEIGHTS={toxinidir}/assets/model_weights.pth
    FORCE_CUDA=1
    TORCH_CUDA_ARCH_LIST=Volta
    FVCORE_CACHE="/tmp"
    CC=clang
    CXX=clang++
    ARCHFLAGS=-arch x86_64

[testenv:twine]
deps =
    twine>=1.12.0
commands =
    python setup.py sdist
    twine check dist/*.tar.gz

[testenv:flake8]
deps =
    flake8
    pep8-naming
    flake8-import-order
commands =
    flake8

[testenv:isort]
deps = isort==5.12.0
commands =
    isort --check-only .

[testenv:black]
# Used by automated build steps to check that all files are properly formatted.
deps = black==23.1.0
commands =
    black --check ./

[testenv:docs]
changedir = doc
deps =
    sphinx
    sphinx-rtd-theme
    sphinx-autoapi
conda_deps =
    gdal
    proj
conda_channels =
    conda-forge
commands = sphinx-build -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:unit]
deps =
    pytest==7.2.1
    pytest-cov==4.0.0
    pytest-xdist==3.2.0
    mock==5.0.1
    opencv-python==4.7.0.72
# put versions
conda_deps =
    gdal
    libgcc
    proj
    cython
    cudatoolkit-dev
    libjpeg-turbo
    pytorch
    torchvision
    pycocotools
    detectron2

conda_channels =
    conda-forge
    nvidia/label/cuda-11.7.0
    pytorch

commands =
    pytest --cov-config .coveragerc --cov aws.osml --cov-report term-missing {posargs}
    {env:IGNORE_COVERAGE:} coverage report --rcfile .coveragerc
    {env:IGNORE_COVERAGE:} coverage html --rcfile .coveragerc